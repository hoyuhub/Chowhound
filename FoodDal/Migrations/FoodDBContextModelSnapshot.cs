// <auto-generated />
using FoodDal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FoodDal.Migrations
{
    [DbContext(typeof(FoodDBContext))]
    partial class FoodDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.HistoricalWeather", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityId");

                    b.Property<int>("CodeDay");

                    b.Property<int>("CodeNight");

                    b.Property<DateTime>("CurrentDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("High");

                    b.Property<int>("Low");

                    b.Property<string>("Precip");

                    b.Property<string>("TextDay");

                    b.Property<string>("TextNight");

                    b.Property<string>("WindDirection");

                    b.Property<string>("WindDirectionDegree");

                    b.Property<int>("WindScale");

                    b.Property<int>("WindSpeed");

                    b.HasKey("id");

                    b.ToTable("HistoricalWeathers");
                });

            modelBuilder.Entity("Models.SCity", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<long?>("ProvinceId");

                    b.Property<string>("ZipCode");

                    b.HasKey("CityId");

                    b.ToTable("SCitys");
                });

            modelBuilder.Entity("Models.SDistrict", b =>
                {
                    b.Property<long>("DistrictId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CityId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("DistrictName");

                    b.HasKey("DistrictId");

                    b.ToTable("SDistricts");
                });

            modelBuilder.Entity("Models.SProvince", b =>
                {
                    b.Property<long>("ProvinceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("ProvinceName");

                    b.HasKey("ProvinceId");

                    b.ToTable("SProvinces");
                });

            modelBuilder.Entity("Models.SystemLog", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Executor");

                    b.Property<DateTime>("SystemTime");

                    b.HasKey("Id");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("Models.XCity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Administrative1");

                    b.Property<string>("Administrative2");

                    b.Property<string>("AdministrativeE1");

                    b.Property<string>("AdministrativeE2");

                    b.Property<string>("CityLevel");

                    b.Property<string>("EName");

                    b.Property<string>("Name");

                    b.Property<string>("TimeZone");

                    b.HasKey("Id");

                    b.ToTable("XCitys");
                });
#pragma warning restore 612, 618
        }
    }
}
